summary: Fetch many Restaurant
tasks:
  - id: postgres_restaurant_search
    fn: com.gs.datastore
    args:
      datasource: postgres
      data: 
        // POST /restaurant/search - Fetch restaurants of a particular city with menu items
        // If couponCode is provided, filter only those menu items with the code
        app.post('/restaurant/search', async (req, res) => {
           const { city, couponCode } = req.body;
           try {
             let restaurants = await prisma.restaurant.findMany({
               where: { location: city },
               include: { menuItems: true },
              });
              if (couponCode) {
                    restaurants = restaurants.map((restaurant) => ({
                   ...restaurant,
                   menuItems: restaurant.menuItems.filter((menuItem) => menuItem.couponCode.includes(couponCode)),
                   }));
              }
              return res.json(restaurants);
            } catch (error) {
              console.error(error);
              return res.status(500).json({ message: 'Internal server error'});
            }
        });
       // Start the server
       app.listen(3000, () => {
          console.log('Server is running on http://localhost:3000');
        });
      config:
        method: Restaurant.findMany
        
    

